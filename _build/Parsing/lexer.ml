# 1 "Parsing/lexer.mll"
 
open Lexing

type lexeme =
| EOF
| FLOAT
| IDENT
| AUTO_EQUAL
| AUTO_ADD
| AUTO_SUB
| AUTO_MUL
| AUTO_DIV
| AUTO_MOD
| AUTO_XOR
| AUTO_AND
| AUTO_OR 
| AUTO_SHR 
| AUTO_SHL 
| AUTO_SHRR 
| PARG 
| PARD 
| LBRACE 
| RBRACE 
| CROCHETG
| CROCHETD
| VIRG 
| PVIRG 
| POINT
| COLON 
| PLUS 
| MINUS 
| INC 
| DEC 
| TIMES 
| DIV 
| MOD 
| AND 
| OR 
| XOR 
| NOT 
| CAND 
| COR 
| COND 
| SUPS 
| SUP 
| INFS 
| INF 
| EG 
| NEG 
| SHL 
| SHR 
| SHRR 
| BNOT 
| VARARG 
| INT_LIT of int
| STRING of string
| BOOL_LIT of bool
|FLOAT_LIT of float
open Lexing

let print_lexeme = function
| EOF-> print_string "EOF"
| AUTO_EQUAL-> print_string "="
| AUTO_ADD  -> print_string "+="
| AUTO_SUB -> print_string "-="
| AUTO_MUL  -> print_string "*="
| AUTO_DIV -> print_string "/="
| AUTO_MOD  -> print_string "%="
| AUTO_XOR -> print_string "^="
| AUTO_AND -> print_string "&="
| AUTO_OR  -> print_string "|="
| AUTO_SHR  -> print_string ">>=" 
| AUTO_SHL  -> print_string "<<=" 
| AUTO_SHRR -> print_string ">>>="  
| PARG -> print_string "("
| PARD -> print_string ")"
| LBRACE -> print_string "{"
| RBRACE -> print_string "}"
| CROCHETG-> print_string "["
| CROCHETD-> print_string "]"
| VIRG -> print_string ","
| PVIRG -> print_string ";"
| POINT -> print_string "."
| COLON -> print_string ":"
| PLUS -> print_string  "+"
| MINUS -> print_string "-"
| INC -> print_string   "++"
| DEC -> print_string  "--"
| TIMES -> print_string "*"
| DIV -> print_string  "/"
| MOD -> print_string  "%"
| AND -> print_string  "&"
| OR -> print_string  "|"
| XOR -> print_string "^"
| NOT -> print_string "!"
| CAND -> print_string "&&"
| COR -> print_string "||"
| COND -> print_string "?"
| SUPS -> print_string ">"
| SUP -> print_string ">"
| INFS -> print_string "<"
| INF -> print_string "<="
| EG -> print_string "=="
| NEG -> print_string "!=="
| SHL -> print_string "<<"
| SHR -> print_string ">>"
| SHRR -> print_string ">>>"
| BNOT -> print_string "~"
| VARARG -> print_string "..."
| INT_LIT f -> print_string "INTLIT("; print_int f; print_string")"
| STRING  s -> print_string"STRINGLIT("; print_string s; print_string")"
| BOOL_LIT b -> print_string "BOOL_LIT("; print_string")"
| FLOAT_LIT f -> print_string"FLOAT_LIT("; print_float f; print_string")"

# 117 "Parsing/lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\000\000\000\000\095\000\175\000\204\000\205\255\215\255\
    \003\000\229\255\022\000\231\255\232\255\233\255\234\255\235\255\
    \236\255\237\255\238\255\005\000\019\000\006\000\045\000\021\000\
    \023\000\024\000\050\000\046\000\025\000\008\000\054\000\003\000\
    \255\255\001\000\246\255\075\000\038\001\253\255\004\000\220\000\
    \077\000\221\000\022\000\251\255\210\255\226\255\249\255\225\255\
    \248\255\247\255\245\255\244\255\217\255\243\255\216\255\242\255\
    \213\255\037\000\039\000\241\255\239\255\211\255\048\000\240\255\
    \116\001\064\000\204\255\200\255\245\000\126\001\009\001\051\000\
    \209\255\150\001\181\001\203\255\191\001\229\001\008\002\219\001\
    \034\002\044\002\063\002\073\002\134\002\001\000\012\000\201\255\
    \012\000\006\000\021\000";
  Lexing.lex_backtrk = 
   "\255\255\255\255\255\255\255\255\052\000\052\000\255\255\255\255\
    \037\000\255\255\025\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\043\000\041\000\035\000\034\000\036\000\
    \033\000\031\000\028\000\027\000\005\000\255\255\032\000\001\000\
    \255\255\000\000\255\255\255\255\255\255\255\255\002\000\255\255\
    \255\255\003\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\048\000\049\000\255\255\255\255\255\255\047\000\255\255\
    \055\000\255\255\255\255\255\255\255\255\055\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\052\000\055\000\255\255\
    \055\000\255\255\055\000\255\255\053\000\255\255\255\255\255\255\
    \255\255\255\255\255\255";
  Lexing.lex_default = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \255\255\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\000\000\035\000\255\255\000\000\255\255\035\000\
    \035\000\035\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\255\255\000\000\000\000\000\000\255\255\000\000\
    \255\255\255\255\000\000\000\000\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\000\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\000\000\
    \255\255\255\255\255\255";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\031\000\032\000\032\000\031\000\033\000\037\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \031\000\008\000\003\000\031\000\000\000\024\000\022\000\000\000\
    \018\000\017\000\025\000\027\000\012\000\026\000\010\000\030\000\
    \005\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\009\000\011\000\019\000\028\000\020\000\007\000\
    \071\000\062\000\061\000\055\000\065\000\029\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
    \056\000\057\000\051\000\052\000\050\000\049\000\044\000\042\000\
    \040\000\045\000\040\000\014\000\043\000\013\000\023\000\047\000\
    \035\000\088\000\059\000\058\000\060\000\036\000\001\000\003\000\
    \003\000\003\000\053\000\046\000\003\000\063\000\066\000\048\000\
    \072\000\087\000\085\000\034\000\002\000\039\000\086\000\039\000\
    \089\000\090\000\087\000\016\000\021\000\015\000\006\000\003\000\
    \003\000\084\000\054\000\000\000\000\000\003\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\000\000\003\000\000\000\000\000\000\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\074\000\000\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\040\000\040\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\073\000\000\000\000\000\000\000\
    \000\000\000\000\074\000\075\000\004\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\039\000\039\000\
    \000\000\000\000\000\000\041\000\000\000\000\000\000\000\000\000\
    \000\000\073\000\000\000\000\000\073\000\000\000\000\000\000\000\
    \075\000\000\000\000\000\075\000\000\000\000\000\000\000\000\000\
    \070\000\000\000\070\000\000\000\076\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\000\000\
    \037\000\073\000\000\000\038\000\000\000\000\000\000\000\000\000\
    \075\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \069\000\069\000\069\000\000\000\076\000\000\000\036\000\036\000\
    \036\000\000\000\000\000\255\255\036\000\255\255\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\000\000\000\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\000\000\036\000\000\000\000\000\000\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \067\000\068\000\067\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\083\000\067\000\083\000\067\000\000\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \067\000\068\000\067\000\000\000\255\255\255\255\000\000\000\000\
    \000\000\000\000\067\000\000\000\067\000\078\000\078\000\078\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\081\000\000\000\
    \081\000\000\000\000\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\000\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\000\000\000\000\000\000\000\000\
    \000\000\075\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\000\000\000\000\000\000\000\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\067\000\079\000\067\000\000\000\
    \000\000\075\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\080\000\080\000\067\000\000\000\
    \067\000\000\000\000\000\000\000\067\000\079\000\067\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\082\000\082\000\067\000\000\000\067\000\067\000\000\000\
    \067\000\000\000\000\000\000\000\000\000\000\000\003\000\003\000\
    \003\000\000\000\000\000\003\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\067\000\000\000\067\000\003\000\003\000\
    \084\000\000\000\000\000\000\000\003\000\000\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\000\000\003\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\033\000\031\000\000\000\038\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\031\000\255\255\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \008\000\019\000\019\000\021\000\010\000\000\000\010\000\010\000\
    \010\000\010\000\010\000\010\000\010\000\010\000\010\000\010\000\
    \020\000\020\000\023\000\022\000\024\000\025\000\028\000\029\000\
    \035\000\027\000\040\000\000\000\042\000\000\000\000\000\026\000\
    \030\000\001\000\057\000\057\000\058\000\030\000\000\000\003\000\
    \003\000\003\000\022\000\027\000\003\000\062\000\065\000\026\000\
    \071\000\086\000\002\000\030\000\000\000\035\000\085\000\040\000\
    \088\000\089\000\090\000\000\000\000\000\000\000\000\000\003\000\
    \003\000\003\000\021\000\255\255\255\255\003\000\255\255\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\255\255\255\255\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\255\255\003\000\255\255\255\255\255\255\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\004\000\255\255\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
    \004\000\039\000\041\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\004\000\255\255\255\255\255\255\
    \255\255\255\255\005\000\004\000\005\000\005\000\005\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\039\000\041\000\
    \255\255\255\255\255\255\039\000\255\255\255\255\255\255\255\255\
    \255\255\005\000\255\255\255\255\004\000\255\255\255\255\255\255\
    \005\000\255\255\255\255\004\000\255\255\255\255\255\255\255\255\
    \068\000\255\255\068\000\255\255\005\000\068\000\068\000\068\000\
    \068\000\068\000\068\000\068\000\068\000\068\000\068\000\255\255\
    \036\000\005\000\255\255\036\000\255\255\255\255\255\255\255\255\
    \005\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\255\255\005\000\255\255\036\000\036\000\
    \036\000\255\255\255\255\035\000\036\000\040\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\255\255\255\255\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\255\255\036\000\255\255\255\255\255\255\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\064\000\064\000\064\000\064\000\
    \064\000\064\000\064\000\064\000\064\000\064\000\069\000\069\000\
    \069\000\069\000\069\000\069\000\069\000\069\000\069\000\069\000\
    \064\000\064\000\064\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\073\000\069\000\073\000\069\000\255\255\073\000\073\000\
    \073\000\073\000\073\000\073\000\073\000\073\000\073\000\073\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \064\000\064\000\064\000\255\255\039\000\041\000\255\255\255\255\
    \255\255\255\255\069\000\255\255\069\000\074\000\074\000\074\000\
    \074\000\074\000\074\000\074\000\074\000\074\000\074\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \076\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \076\000\076\000\076\000\076\000\076\000\076\000\079\000\255\255\
    \079\000\255\255\255\255\079\000\079\000\079\000\079\000\079\000\
    \079\000\079\000\079\000\079\000\079\000\077\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\077\000\077\000\077\000\255\255\
    \076\000\076\000\076\000\076\000\076\000\076\000\077\000\077\000\
    \077\000\077\000\077\000\077\000\255\255\255\255\255\255\255\255\
    \255\255\077\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \078\000\078\000\078\000\078\000\078\000\078\000\078\000\078\000\
    \078\000\078\000\255\255\255\255\255\255\255\255\077\000\077\000\
    \077\000\077\000\077\000\077\000\078\000\078\000\078\000\255\255\
    \255\255\077\000\080\000\080\000\080\000\080\000\080\000\080\000\
    \080\000\080\000\080\000\080\000\081\000\081\000\081\000\081\000\
    \081\000\081\000\081\000\081\000\081\000\081\000\080\000\255\255\
    \080\000\255\255\255\255\255\255\078\000\078\000\078\000\082\000\
    \082\000\082\000\082\000\082\000\082\000\082\000\082\000\082\000\
    \082\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \083\000\083\000\083\000\082\000\255\255\082\000\080\000\255\255\
    \080\000\255\255\255\255\255\255\255\255\255\255\084\000\084\000\
    \084\000\255\255\255\255\084\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\082\000\255\255\082\000\084\000\084\000\
    \084\000\255\255\255\255\255\255\084\000\255\255\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\255\255\255\255\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\255\255\084\000\255\255\255\255\255\255\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 145 "Parsing/lexer.mll"
                     ( Lexing.new_line lexbuf; token lexbuf )
# 407 "Parsing/lexer.ml"

  | 1 ->
# 146 "Parsing/lexer.mll"
                            ( token lexbuf )
# 412 "Parsing/lexer.ml"

  | 2 ->
# 147 "Parsing/lexer.mll"
             ( token lexbuf )
# 417 "Parsing/lexer.ml"

  | 3 ->
# 148 "Parsing/lexer.mll"
                ( token lexbuf )
# 422 "Parsing/lexer.ml"

  | 4 ->
# 149 "Parsing/lexer.mll"
          (EOF)
# 427 "Parsing/lexer.ml"

  | 5 ->
# 150 "Parsing/lexer.mll"
         (AUTO_EQUAL)
# 432 "Parsing/lexer.ml"

  | 6 ->
# 151 "Parsing/lexer.mll"
         (AUTO_ADD)
# 437 "Parsing/lexer.ml"

  | 7 ->
# 152 "Parsing/lexer.mll"
         (AUTO_SUB)
# 442 "Parsing/lexer.ml"

  | 8 ->
# 153 "Parsing/lexer.mll"
         (AUTO_MUL)
# 447 "Parsing/lexer.ml"

  | 9 ->
# 154 "Parsing/lexer.mll"
         (AUTO_DIV)
# 452 "Parsing/lexer.ml"

  | 10 ->
# 155 "Parsing/lexer.mll"
         (AUTO_MOD)
# 457 "Parsing/lexer.ml"

  | 11 ->
# 156 "Parsing/lexer.mll"
         (AUTO_XOR)
# 462 "Parsing/lexer.ml"

  | 12 ->
# 157 "Parsing/lexer.mll"
         (AUTO_AND)
# 467 "Parsing/lexer.ml"

  | 13 ->
# 158 "Parsing/lexer.mll"
         (AUTO_OR )
# 472 "Parsing/lexer.ml"

  | 14 ->
# 159 "Parsing/lexer.mll"
          (AUTO_SHR )
# 477 "Parsing/lexer.ml"

  | 15 ->
# 160 "Parsing/lexer.mll"
          (AUTO_SHL )
# 482 "Parsing/lexer.ml"

  | 16 ->
# 161 "Parsing/lexer.mll"
           (AUTO_SHRR)
# 487 "Parsing/lexer.ml"

  | 17 ->
# 162 "Parsing/lexer.mll"
         (PARG )
# 492 "Parsing/lexer.ml"

  | 18 ->
# 163 "Parsing/lexer.mll"
         (PARD)
# 497 "Parsing/lexer.ml"

  | 19 ->
# 164 "Parsing/lexer.mll"
         (LBRACE )
# 502 "Parsing/lexer.ml"

  | 20 ->
# 165 "Parsing/lexer.mll"
         (RBRACE )
# 507 "Parsing/lexer.ml"

  | 21 ->
# 166 "Parsing/lexer.mll"
         (CROCHETG)
# 512 "Parsing/lexer.ml"

  | 22 ->
# 167 "Parsing/lexer.mll"
         (CROCHETD)
# 517 "Parsing/lexer.ml"

  | 23 ->
# 168 "Parsing/lexer.mll"
         (VIRG )
# 522 "Parsing/lexer.ml"

  | 24 ->
# 169 "Parsing/lexer.mll"
         (PVIRG )
# 527 "Parsing/lexer.ml"

  | 25 ->
# 170 "Parsing/lexer.mll"
         (POINT)
# 532 "Parsing/lexer.ml"

  | 26 ->
# 171 "Parsing/lexer.mll"
         (COLON )
# 537 "Parsing/lexer.ml"

  | 27 ->
# 172 "Parsing/lexer.mll"
         (PLUS )
# 542 "Parsing/lexer.ml"

  | 28 ->
# 173 "Parsing/lexer.mll"
         (MINUS)
# 547 "Parsing/lexer.ml"

  | 29 ->
# 174 "Parsing/lexer.mll"
         (INC )
# 552 "Parsing/lexer.ml"

  | 30 ->
# 175 "Parsing/lexer.mll"
         (DEC )
# 557 "Parsing/lexer.ml"

  | 31 ->
# 176 "Parsing/lexer.mll"
         (TIMES )
# 562 "Parsing/lexer.ml"

  | 32 ->
# 177 "Parsing/lexer.mll"
         (DIV  )
# 567 "Parsing/lexer.ml"

  | 33 ->
# 178 "Parsing/lexer.mll"
         (MOD )
# 572 "Parsing/lexer.ml"

  | 34 ->
# 179 "Parsing/lexer.mll"
         (AND )
# 577 "Parsing/lexer.ml"

  | 35 ->
# 180 "Parsing/lexer.mll"
         (OR )
# 582 "Parsing/lexer.ml"

  | 36 ->
# 181 "Parsing/lexer.mll"
         (XOR )
# 587 "Parsing/lexer.ml"

  | 37 ->
# 182 "Parsing/lexer.mll"
         (NOT )
# 592 "Parsing/lexer.ml"

  | 38 ->
# 183 "Parsing/lexer.mll"
         (CAND )
# 597 "Parsing/lexer.ml"

  | 39 ->
# 184 "Parsing/lexer.mll"
          (COR )
# 602 "Parsing/lexer.ml"

  | 40 ->
# 185 "Parsing/lexer.mll"
         (COND)
# 607 "Parsing/lexer.ml"

  | 41 ->
# 186 "Parsing/lexer.mll"
         (SUPS)
# 612 "Parsing/lexer.ml"

  | 42 ->
# 187 "Parsing/lexer.mll"
         (SUP)
# 617 "Parsing/lexer.ml"

  | 43 ->
# 188 "Parsing/lexer.mll"
         (INFS)
# 622 "Parsing/lexer.ml"

  | 44 ->
# 189 "Parsing/lexer.mll"
         (INF)
# 627 "Parsing/lexer.ml"

  | 45 ->
# 190 "Parsing/lexer.mll"
         (EG)
# 632 "Parsing/lexer.ml"

  | 46 ->
# 191 "Parsing/lexer.mll"
          (NEG)
# 637 "Parsing/lexer.ml"

  | 47 ->
# 192 "Parsing/lexer.mll"
         (SHL)
# 642 "Parsing/lexer.ml"

  | 48 ->
# 193 "Parsing/lexer.mll"
         (SHR)
# 647 "Parsing/lexer.ml"

  | 49 ->
# 194 "Parsing/lexer.mll"
          (SHRR)
# 652 "Parsing/lexer.ml"

  | 50 ->
# 195 "Parsing/lexer.mll"
                (BNOT )
# 657 "Parsing/lexer.ml"

  | 51 ->
# 196 "Parsing/lexer.mll"
                (VARARG )
# 662 "Parsing/lexer.ml"

  | 52 ->
let
# 197 "Parsing/lexer.mll"
                           nb
# 668 "Parsing/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 197 "Parsing/lexer.mll"
                                         ( INT_LIT(int_of_string nb ))
# 672 "Parsing/lexer.ml"

  | 53 ->
let
# 198 "Parsing/lexer.mll"
                      s
# 678 "Parsing/lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 198 "Parsing/lexer.mll"
                             ( STRING s )
# 682 "Parsing/lexer.ml"

  | 54 ->
let
# 199 "Parsing/lexer.mll"
               b
# 688 "Parsing/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 199 "Parsing/lexer.mll"
                 ( BOOL_LIT (bool_of_string b) )
# 692 "Parsing/lexer.ml"

  | 55 ->
let
# 200 "Parsing/lexer.mll"
              nb
# 698 "Parsing/lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 200 "Parsing/lexer.mll"
                 ( FLOAT_LIT(float_of_string nb ))
# 702 "Parsing/lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; 
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

# 202 "Parsing/lexer.mll"
 
let rec examine_all lexbuf =
	let res = token lexbuf in
	print_lexeme res;
	print_string " ";
	
	match res with
		| EOF -> ()
		| _  -> examine_all lexbuf

let compile file =
	print_string("File " ^file^ " is being treated!\n");
	try
	let input_file = open_in file in
	let lexbuf = Lexing.from_channel input_file in
	examine_all lexbuf;
	print_newline ();
	close_in(input_file)
	with Sys_error s ->
	print_endline("Can’t find file ’"^ file ^"’")





# 735 "Parsing/lexer.ml"
