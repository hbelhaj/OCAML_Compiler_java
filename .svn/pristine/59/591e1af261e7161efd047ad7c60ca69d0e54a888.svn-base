open AST

type env_global = {
  classes : (string, env_class) Hashtbl.t ;
  (*mutable current : string*)
}

type function_desc = {
  ftype: Type.t;
  fargs: argument list
}

type env_classe = {
  classe_parent : Type.ref_type;
  constructeurs : (string, function_desc) Hashtbl.t;
  methodes : (string, function_desc) Hashtbl.t;
  attributs : (string, Type.t) Hashtbl.t;
  
}

let vType v =
  match v with
  | Boolean b -> Some(Type.Primitive(Type.Boolean))
  | Char c -> Some(Type.Primitive(Type.Char))
  | Int i -> Some(Type.Primitive(Type.Int))
  | Float f -> Some(Type.Primitive(Type.Float))
  | Null -> None
  (*| String s -> Some(Type.Ref({ tpath = []; tid = "String" })) *)

type env = {
  return_type: Type.t;
  vars_type: (string, Type.t) Hashtbl.t
}




  
